{"version":3,"sources":["model/units.enum.ts","model/transformation.model.ts","service/useRows.tsx","Theme/themes.enum.ts","context/theme-context.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Unit","UnitTransformation","unit","value","fontSize","Px","name","px","rem","em","pt","Rem","Em","Pt","useRows","Theme","useState","setValue","fontBaseSize","setFontBaseSize","unitTransf","rows","createData","ThemeContext","React","createContext","ThemeProvider","props","Dark","theme","setTheme","useEffect","document","documentElement","classList","add","toLocaleString","remove","Provider","children","App","useContext","className","onClick","Light","Container","maxWidth","Grid","container","spacing","item","xs","sm","justify","TextField","InputProps","inputProps","min","id","type","variant","fullWidth","label","margin","onChange","e","parseFloat","target","parseInt","TableContainer","style","marginTop","borderRadius","Table","aria-label","TableHead","TableRow","TableCell","backgroundColor","align","TableBody","map","row","index","cssClass","key","component","scope","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3879ecbd.chunk.js","sourcesContent":["enum Unit{\r\n    Px = \"px\",\r\n    Em = \"em\",\r\n    Rem = \"rem\",\r\n    Cm = \"cm\",\r\n    Pt = \"pt\",\r\n    In = \"in\"\r\n}\r\n\r\nexport default Unit;","import Unit from \"./units.enum\";\r\n\r\nclass UnitTransformation{\r\n\r\n    public createData(unit:Unit, value:number, fontSize:number){\r\n        switch(unit){\r\n            case Unit.Px:\r\n                return {name: Unit.Px, px:value, rem:value/fontSize, em:value/fontSize, pt:value*0.74999943307122}\r\n            case Unit.Rem:\r\n                return {name: Unit.Rem, px:value*fontSize, rem:value, em:value, pt:value*11.99999092914}\r\n            case Unit.Em:\r\n                return {name: Unit.Em, px:value*fontSize, rem:value, em:value, pt:value*11.99999092914}\r\n            case Unit.Pt:\r\n                return {name: Unit.Pt, px:1.33333*value, rem:0.083333396325467*value, em:0.083333396325467*value, pt:value}\r\n        }\r\n    }\r\n   \r\n   \r\n}\r\n\r\nexport default UnitTransformation;","import  { useState } from 'react';\r\nimport UnitTransformation from '../model/transformation.model';\r\nimport Unit from '../model/units.enum';\r\n\r\nfunction useRows() {\r\n    const [value, setValue] = useState(1);\r\n    const [fontBaseSize, setFontBaseSize] = useState(16);\r\n  \r\n    const unitTransf = new UnitTransformation();\r\n  \r\n    const rows=[\r\n      unitTransf.createData(Unit.Px, value, fontBaseSize),\r\n      unitTransf.createData(Unit.Rem, value, fontBaseSize),\r\n      unitTransf.createData(Unit.Em, value, fontBaseSize),\r\n      unitTransf.createData(Unit.Pt, value, fontBaseSize)\r\n    ]\r\n\r\n    return {\r\n        value, setValue, fontBaseSize, setFontBaseSize, rows\r\n    }\r\n}\r\n\r\nexport default useRows;","enum Theme {\r\n  Light = \"light\",\r\n  Dark = \"dark\",\r\n}\r\n\r\nexport default Theme;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport Theme from \"../Theme/themes.enum\";\r\n\r\ninterface ThemeContextModel {\r\n  theme: Theme;\r\n  setTheme: CallableFunction;\r\n}\r\n\r\nconst ThemeContext = React.createContext({} as ThemeContextModel);\r\n\r\nexport const ThemeProvider = (props: any) => {\r\n  const [theme, setTheme] = useState(Theme.Dark);\r\n  useEffect(() => {\r\n    document.documentElement.classList.add(theme.toLocaleString());\r\n    return () => {\r\n      document.documentElement.classList.remove(theme.toLocaleString());\r\n    };\r\n  }, [theme]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useThemeContext() {\r\n  return useContext(ThemeContext);\r\n}\r\n","import React from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport useRows from \"./service/useRows\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { FiSun } from \"react-icons/fi\";\nimport { FaMoon } from \"react-icons/fa\";\nimport { useThemeContext } from \"./context/theme-context\";\nimport Theme from \"./Theme/themes.enum\";\n\nfunction App() {\n  const { value, setValue, fontBaseSize, setFontBaseSize, rows } = useRows();\n  const { theme, setTheme } = useThemeContext();\n\n  return (\n    <div className=\"entireContainer\">\n      {theme === Theme.Dark ? (\n        <FiSun\n          className=\"settingsIcon\"\n          onClick={() => {\n            setTheme(Theme.Light);\n          }}\n        />\n      ) : (\n        <FaMoon\n          className=\"settingsIcon\"\n          onClick={() => {\n            setTheme(Theme.Dark);\n          }}\n        />\n      )}\n      <Container maxWidth=\"md\" className={\"unitContainer\"}>\n        <Grid container spacing={3}>\n          <Grid container item xs={12} sm={4}></Grid>\n          <Grid container item xs={12} sm={4} justify=\"center\">\n            <h1 className={\"title\"}>Unit Converter</h1>\n          </Grid>\n          <Grid container item xs={12} sm={4}></Grid>\n        </Grid>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6} container justify=\"center\">\n            <TextField\n              InputProps={{\n                inputProps: {\n                  min: 1,\n                },\n              }}\n              id=\"filled-basic\"\n              type=\"number\"\n              variant=\"filled\"\n              fullWidth\n              label=\"Value\"\n              margin=\"dense\"\n              value={value}\n              onChange={(e) => {\n                setValue(parseFloat(e.target.value));\n              }}\n            />\n          </Grid>\n          <Grid item xs={12} sm={6} container justify=\"center\">\n            <TextField\n              InputProps={{\n                inputProps: {\n                  min: 1,\n                },\n              }}\n              fullWidth\n              label=\"Default font size\"\n              id=\"filled-basic\"\n              margin=\"dense\"\n              variant=\"filled\"\n              type=\"number\"\n              value={fontBaseSize}\n              onChange={(e) => {\n                setFontBaseSize(parseInt(e.target.value));\n              }}\n            />\n          </Grid>\n        </Grid>\n\n        <TableContainer\n          style={{ marginTop: \"1%\", borderRadius: \"10px\" }}\n          className=\"tableContainer\"\n        >\n          <Table aria-label=\"simple table\" className=\"table\">\n            <TableHead className=\"tableHeader\">\n              <TableRow className=\"tableRow\">\n                <TableCell\n                  style={{ backgroundColor: \"#81c784\" }}\n                  className=\"tableCellHeader\"\n                >{`Value: ${value}`}</TableCell>\n                <TableCell className=\"tableCellHeader\" align=\"center\">\n                  px\n                </TableCell>\n                <TableCell className=\"tableCellHeader\" align=\"center\">\n                  rem\n                </TableCell>\n                <TableCell className=\"tableCellHeader\" align=\"center\">\n                  em\n                </TableCell>\n                <TableCell className=\"tableCellHeader\" align=\"center\">\n                  pt\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row, index) => {\n                let cssClass =\n                  index % 2 === 0 ? \"tableCellEven\" : \"tableCellOdd\";\n                return (\n                  <TableRow key={row!.name}>\n                    <TableCell\n                      component=\"th\"\n                      scope=\"row\"\n                      className={\"tableCellHeader\"}\n                    >\n                      {row!.name}\n                    </TableCell>\n                    <TableCell align=\"center\" className={cssClass}>\n                      {row?.px}\n                    </TableCell>\n                    <TableCell align=\"center\" className={cssClass}>\n                      {row?.rem}\n                    </TableCell>\n                    <TableCell align=\"center\" className={cssClass}>\n                      {row?.em}\n                    </TableCell>\n                    <TableCell align=\"center\" className={cssClass}>\n                      {row?.pt}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport \"./Theme/dark.scss\";\nimport \"./Theme/light.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider } from \"./context/theme-context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}