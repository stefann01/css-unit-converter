{"version":3,"sources":["components/color-converter/components/title/color-converter-title.tsx","model/color-encoding.enum.ts","reducers/color-reducer.tsx","context/color-context.tsx","Theme/themes.enum.ts","context/theme-context.tsx","components/color-converter/components/hex-input/hex-input.tsx","components/color-converter/components/css-code-card/css-color-code.tsx","components/color-converter/components/card/color-card.tsx","components/color-converter/components/cards-container/cards-container.tsx","components/color-converter/color-converter.tsx","model/units.enum.ts","model/transformation.model.ts","service/useRows.tsx","components/css-unit-converter/css-unit-converter.tsx","model/components.enum.ts","context/navigation-context.tsx","components/theme-icon/theme-icon.tsx","components/navigation-bar/navigation-bar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ColorConverterTitle","Box","p","Grid","container","justify","item","className","ColorEncoding","colorReducer","state","action","type","Hex","test","payload","color","Rgb","newState","index","rgbColor","value","hexColor","ColorConvert","rgb","hex","cmykColor","cmyk","hslColor","hsl","hsvColor","hsv","Cmyk","Hsl","Hsv","Theme","ColorContext","React","createContext","initialValue","ColorContextProvider","props","useReducer","dispatch","Provider","children","useColorContext","useContext","ThemeContext","ThemeProvider","useState","Light","theme","setTheme","useEffect","document","documentElement","classList","add","toLocaleString","remove","useThemeContext","HexInput","colorContext","style","Dark","labelColor","inputColor","backgroundColor","getStyle","TextField","variant","InputProps","InputLabelProps","id","label","onChange","e","target","CssColorCode","useSnackbar","enqueueSnackbar","closeSnackbar","cssCode","useRef","spacing","alignItems","ref","getCode","IconButton","aria-label","onClick","current","innerText","copy","autoHideDuration","SliderModel","min","max","title","ColorCard","Card","CardHeader","display","flexDirection","justifyContent","Typography","width","height","borderRadius","CardContent","sliders","map","slide","ButtonGroup","marginLeft","Button","size","disabled","key","newValue","valueLabelDisplay","aria-labelledby","CardsContainer","xs","sm","md","lg","xl","text","ColorConverter","Unit","Container","UnitTransformation","unit","fontSize","Px","name","px","rem","em","pt","Rem","Em","Pt","useRows","setValue","fontBaseSize","setFontBaseSize","unitTransf","rows","createData","UnitConverter","maxWidth","inputProps","fullWidth","margin","parseFloat","parseInt","TableContainer","marginTop","Table","TableHead","TableRow","TableCell","align","TableBody","row","cssClass","component","scope","Components","NavigationContext","NavigationProvider","activeComponent","setActiveComponent","useNavigationContext","ThemeIcon","NavigationBar","navigationContext","AppBar","position","Toolbar","edge","injectIntl","renderSelectedComponent","Boolean","window","location","hostname","match","messages","de","en","ReactDOM","render","StrictMode","locale","maxSnack","anchorOrigin","vertical","horizontal","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3253c6a2.chunk.js","sourcesContent":["import { Box, Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport default function ColorConverterTitle() {\r\n  return (\r\n    <Box p={1}>\r\n      <Grid container justify=\"center\">\r\n        <Grid item>\r\n          <h1 className={\"text\"}>Color Converter</h1>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n","enum ColorEncoding {\r\n  Hex = \"hex\",\r\n  Cmyk = \"cmyk\",\r\n  Hsl = \"hsl\",\r\n  Hsv = \"hsv\",\r\n  Rgb = \"rgb\",\r\n}\r\nexport default ColorEncoding;\r\n","import Action from \"../model/action.model\";\r\nimport ColorEncoding from \"../model/color-encoding.enum\";\r\nimport ColorConverter from \"../service/color-converter\";\r\nimport ColorConvert from \"color-convert\";\r\n\r\nexport function colorReducer(\r\n  state: {\r\n    hexColor: string;\r\n    rgbColor: number[];\r\n    cmykColor: number[];\r\n    hslColor: number[];\r\n    hsvColor: number[];\r\n  },\r\n  action: Action<ColorEncoding, any>\r\n) {\r\n  switch (action.type) {\r\n    case ColorEncoding.Hex:\r\n      if (/^#[0-9A-F]{0,6}$/i.test(action.payload.color)) {\r\n        return action.payload.color;\r\n      }\r\n      return state;\r\n    case ColorEncoding.Rgb: {\r\n      const newState = { ...state };\r\n      const index = action.payload.index;\r\n      newState.rgbColor[index] = action.payload.value;\r\n      newState.hexColor =\r\n        \"#\" +\r\n        ColorConvert.rgb.hex(\r\n          newState.rgbColor[0],\r\n          newState.rgbColor[1],\r\n          newState.rgbColor[2]\r\n        );\r\n      newState.cmykColor = ColorConvert.rgb.cmyk(\r\n        newState.rgbColor[0],\r\n        newState.rgbColor[1],\r\n        newState.rgbColor[2]\r\n      );\r\n      newState.hslColor = ColorConvert.rgb.hsl(\r\n        newState.rgbColor[0],\r\n        newState.rgbColor[1],\r\n        newState.rgbColor[2]\r\n      );\r\n      newState.hsvColor = ColorConvert.rgb.hsv(\r\n        newState.rgbColor[0],\r\n        newState.rgbColor[1],\r\n        newState.rgbColor[2]\r\n      );\r\n      return newState;\r\n    }\r\n\r\n    case ColorEncoding.Cmyk: {\r\n      const newState = { ...state };\r\n      const index = action.payload.index;\r\n      newState.cmykColor[index] = action.payload.value;\r\n      newState.hexColor =\r\n        \"#\" +\r\n        ColorConvert.cmyk.hex(\r\n          newState.cmykColor[0],\r\n          newState.cmykColor[1],\r\n          newState.cmykColor[2],\r\n          newState.cmykColor[3]\r\n        );\r\n      newState.rgbColor = ColorConvert.cmyk.rgb(\r\n        newState.cmykColor[0],\r\n        newState.cmykColor[1],\r\n        newState.cmykColor[2],\r\n        newState.cmykColor[3]\r\n      );\r\n\r\n      newState.hslColor = ColorConvert.cmyk.hsl(\r\n        newState.cmykColor[0],\r\n        newState.cmykColor[1],\r\n        newState.cmykColor[2],\r\n        newState.cmykColor[3]\r\n      );\r\n\r\n      newState.hsvColor = ColorConvert.cmyk.hsv(\r\n        newState.cmykColor[0],\r\n        newState.cmykColor[1],\r\n        newState.cmykColor[2],\r\n        newState.cmykColor[3]\r\n      );\r\n\r\n      return newState;\r\n    }\r\n\r\n    case ColorEncoding.Hsl: {\r\n      const newState = { ...state };\r\n      const index = action.payload.index;\r\n      newState.hslColor[index] = action.payload.value;\r\n      newState.hexColor =\r\n        \"#\" +\r\n        ColorConvert.hsl.hex(\r\n          newState.hslColor[0],\r\n          newState.hslColor[1],\r\n          newState.hslColor[2]\r\n        );\r\n      newState.cmykColor = ColorConvert.hsl.cmyk(\r\n        newState.hslColor[0],\r\n        newState.hslColor[1],\r\n        newState.hslColor[2]\r\n      );\r\n      newState.rgbColor = ColorConvert.hsl.rgb(\r\n        newState.hslColor[0],\r\n        newState.hslColor[1],\r\n        newState.hslColor[2]\r\n      );\r\n      newState.hsvColor = ColorConvert.hsl.hsv(\r\n        newState.hslColor[0],\r\n        newState.hslColor[1],\r\n        newState.hslColor[2]\r\n      );\r\n      return newState;\r\n    }\r\n\r\n    case ColorEncoding.Hsv: {\r\n      const newState = { ...state };\r\n      const index = action.payload.index;\r\n      newState.hsvColor[index] = action.payload.value;\r\n      newState.hexColor =\r\n        \"#\" +\r\n        ColorConvert.hsv.hex(\r\n          newState.hsvColor[0],\r\n          newState.hsvColor[1],\r\n          newState.hsvColor[2]\r\n        );\r\n      newState.cmykColor = ColorConvert.hsv.cmyk(\r\n        newState.hsvColor[0],\r\n        newState.hsvColor[1],\r\n        newState.hsvColor[2]\r\n      );\r\n      newState.hslColor = ColorConvert.hsv.hsl(\r\n        newState.hsvColor[0],\r\n        newState.hsvColor[1],\r\n        newState.hsvColor[2]\r\n      );\r\n      newState.rgbColor = ColorConvert.hsv.rgb(\r\n        newState.hsvColor[0],\r\n        newState.hsvColor[1],\r\n        newState.hsvColor[2]\r\n      );\r\n      return newState;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { useContext, useReducer } from \"react\";\r\nimport { colorReducer } from \"../reducers/color-reducer\";\r\n\r\nexport interface ColorContextModel {\r\n  hexColor: string;\r\n  rgbColor: number[];\r\n  cmykColor: number[];\r\n  dispatch: CallableFunction;\r\n}\r\n\r\nconst ColorContext = React.createContext({} as any);\r\nconst initialValue = {\r\n  hexColor: \"#000000\",\r\n  rgbColor: [0, 0, 0],\r\n  cmykColor: [0, 0, 0, 100],\r\n  hslColor: [0, 0, 0],\r\n  hsvColor: [0, 0, 0],\r\n};\r\n\r\nexport const ColorContextProvider = (props: any) => {\r\n  const [state, dispatch] = useReducer(colorReducer, initialValue);\r\n  return (\r\n    <ColorContext.Provider\r\n      value={{\r\n        hexColor: state.hexColor,\r\n        rgbColor: state.rgbColor,\r\n        cmykColor: state.cmykColor,\r\n        hslColor: state.hslColor,\r\n        hsvColor: state.hsvColor,\r\n        dispatch,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ColorContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useColorContext() {\r\n  return useContext(ColorContext);\r\n}\r\n","enum Theme {\r\n  Light = \"light\",\r\n  Dark = \"dark\",\r\n}\r\n\r\nexport default Theme;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport Theme from \"../Theme/themes.enum\";\r\n\r\ninterface ThemeContextModel {\r\n  theme: Theme;\r\n  setTheme: CallableFunction;\r\n}\r\n\r\nconst ThemeContext = React.createContext({} as ThemeContextModel);\r\n\r\nexport const ThemeProvider = (props: any) => {\r\n  const [theme, setTheme] = useState(Theme.Light);\r\n  useEffect(() => {\r\n    document.documentElement.classList.add(theme.toLocaleString());\r\n    return () => {\r\n      document.documentElement.classList.remove(theme.toLocaleString());\r\n    };\r\n  }, [theme]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, setTheme }}>\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useThemeContext() {\r\n  return useContext(ThemeContext);\r\n}\r\n","import { Box, Grid, TextField } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useColorContext } from \"../../../../context/color-context\";\r\nimport { useThemeContext } from \"../../../../context/theme-context\";\r\nimport ColorEncoding from \"../../../../model/color-encoding.enum\";\r\nimport Theme from \"../../../../Theme/themes.enum\";\r\n\r\nfunction getStyle(theme: Theme) {\r\n  if (theme === Theme.Dark) {\r\n    return {\r\n      labelColor: \"white\",\r\n      inputColor: \"white\",\r\n      backgroundColor: \"#2d2d2d\",\r\n    };\r\n  }\r\n}\r\n\r\nexport default function HexInput() {\r\n  const colorContext = useColorContext();\r\n  const appTheme = useThemeContext();\r\n  const style = getStyle(appTheme.theme);\r\n  return (\r\n    <Box p={2}>\r\n      <Grid container justify=\"center\">\r\n        <Grid item>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            InputProps={{\r\n              style: {\r\n                color: style?.inputColor,\r\n                backgroundColor: style?.backgroundColor,\r\n              },\r\n            }}\r\n            InputLabelProps={{\r\n              style: { color: style?.labelColor },\r\n            }}\r\n            id=\"outlined-basic\"\r\n            label=\"Hex\"\r\n            value={colorContext.hexColor}\r\n            onChange={(e) =>\r\n              colorContext.dispatch({\r\n                type: ColorEncoding.Hex,\r\n                payload: { color: e.target.value },\r\n              })\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n","import { Grid, IconButton } from \"@material-ui/core\";\r\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\r\n\r\nimport React, { useRef } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { useColorContext } from \"../../../../context/color-context\";\r\nimport ColorEncoding from \"../../../../model/color-encoding.enum\";\r\n\r\nfunction getCode(type: ColorEncoding, colorContext) {\r\n  switch (type) {\r\n    case ColorEncoding.Rgb:\r\n      return (\r\n        <code\r\n          className={\"cssCode\"}\r\n        >{`rgb(${colorContext.rgbColor[0]}, ${colorContext.rgbColor[1]}, ${colorContext.rgbColor[2]});`}</code>\r\n      );\r\n    case ColorEncoding.Hsl:\r\n      return (\r\n        <code\r\n          className={\"cssCode\"}\r\n        >{`hsl(${colorContext.hslColor[0]}, ${colorContext.hslColor[1]}, ${colorContext.hslColor[2]});`}</code>\r\n      );\r\n    case ColorEncoding.Hsv:\r\n      return (\r\n        <code\r\n          className={\"cssCode\"}\r\n        >{`hsl(${colorContext.hsvColor[0]}, ${colorContext.hsvColor[1]}, ${colorContext.hsvColor[2]});`}</code>\r\n      );\r\n    case ColorEncoding.Cmyk:\r\n      return (\r\n        <code\r\n          className={\"cssCode\"}\r\n        >{`hsl(${colorContext.cmykColor[0]}, ${colorContext.cmykColor[1]}, ${colorContext.cmykColor[2]}, ${colorContext.cmykColor[3]});`}</code>\r\n      );\r\n    default:\r\n      return <></>;\r\n  }\r\n}\r\n\r\ninterface ICssColorCodeProps {\r\n  type: ColorEncoding;\r\n}\r\n\r\nexport default function CssColorCode(props: ICssColorCodeProps) {\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n  const colorContext = useColorContext();\r\n  const cssCode = useRef<HTMLSpanElement>(null);\r\n\r\n  function copyCodeToClipboard(value: string | undefined) {\r\n    if (value) {\r\n      copy(value);\r\n      enqueueSnackbar(\"Copied to clipboard\", {\r\n        variant: \"success\",\r\n        autoHideDuration: 1200,\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={1} justify={\"center\"} alignItems={\"center\"}>\r\n      <Grid item>\r\n        {<span ref={cssCode}>{getCode(props.type, colorContext)}</span>}\r\n      </Grid>\r\n      <Grid item>\r\n        <IconButton aria-label=\"clippboard\" className={\"iconButton\"}>\r\n          <FileCopyIcon\r\n            className={\"copyIcon\"}\r\n            onClick={() => {\r\n              copyCodeToClipboard(cssCode.current?.innerText);\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import {\r\n  Button,\r\n  ButtonGroup,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport Slider from \"@material-ui/core/Slider/Slider\";\r\nimport React from \"react\";\r\nimport { useColorContext } from \"../../../../context/color-context\";\r\nimport ColorEncoding from \"../../../../model/color-encoding.enum\";\r\nimport CssColorCode from \"../css-code-card/css-color-code\";\r\nimport \"./color-card.scss\";\r\nexport class SliderModel {\r\n  constructor(\r\n    public min: number,\r\n    public max: number,\r\n    public title: string,\r\n    public value: number\r\n  ) {}\r\n}\r\n\r\ninterface IColorCardProps {\r\n  title: string;\r\n  sliders: SliderModel[];\r\n  text: string;\r\n  type: ColorEncoding;\r\n}\r\n\r\nfunction ColorCard(props: IColorCardProps) {\r\n  const colorContext = useColorContext();\r\n  return (\r\n    <Card className={\"card\"}>\r\n      <CardHeader\r\n        title={\r\n          <span\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-around\",\r\n            }}\r\n          >\r\n            <Typography className={\"text\"}>{props.title}</Typography>\r\n            <div\r\n              style={{\r\n                backgroundColor: colorContext.hexColor,\r\n                width: \"50px\",\r\n                height: \"20px\",\r\n                borderRadius: \"3px\",\r\n              }}\r\n            ></div>\r\n          </span>\r\n        }\r\n      />\r\n      <CardContent>\r\n        {props.sliders.map((slide, index) => {\r\n          return (\r\n            <>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <Typography className={\"text\"}>{slide.title}</Typography>\r\n                <ButtonGroup\r\n                  color=\"primary\"\r\n                  aria-label=\"outlined primary button group\"\r\n                  style={{ marginLeft: \"auto\" }}\r\n                >\r\n                  <Button\r\n                    size=\"small\"\r\n                    className={\"changeValueButton\"}\r\n                    onClick={() => {\r\n                      if (slide.value < 255) {\r\n                        colorContext.dispatch({\r\n                          type: props.type,\r\n                          payload: { index, value: slide.value + 1 },\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    +\r\n                  </Button>\r\n\r\n                  <Button\r\n                    size=\"small\"\r\n                    disabled\r\n                    className={\"changeValueButtonDisabled\"}\r\n                  >\r\n                    {slide.value}\r\n                  </Button>\r\n                  <Button\r\n                    size=\"small\"\r\n                    className={\"changeValueButton\"}\r\n                    onClick={() => {\r\n                      if (slide.value > 0) {\r\n                        colorContext.dispatch({\r\n                          type: props.type,\r\n                          payload: { index, value: slide.value - 1 },\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    -\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </div>\r\n\r\n              <Slider\r\n                className={\"slider\"}\r\n                key={index}\r\n                value={slide.value}\r\n                min={slide.min}\r\n                max={slide.max}\r\n                onChange={(e, newValue) => {\r\n                  colorContext.dispatch({\r\n                    type: props.type,\r\n                    payload: { index, value: newValue },\r\n                  });\r\n                }}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"non-linear-slider\"\r\n              ></Slider>\r\n            </>\r\n          );\r\n        })}\r\n      </CardContent>\r\n      <CssColorCode type={props.type} />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ColorCard;\r\n","import { Box, Grid } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useColorContext } from \"../../../../context/color-context\";\r\nimport ColorEncoding from \"../../../../model/color-encoding.enum\";\r\nimport ColorCard, { SliderModel } from \"../card/color-card\";\r\nconst xs = 12;\r\nconst sm = 12;\r\nconst md = 6;\r\nconst lg = 3;\r\nconst xl = 3;\r\n\r\nexport default function CardsContainer() {\r\n  const colorContext = useColorContext();\r\n  return (\r\n    <Box p={2} className={\"colorCardsContainer\"}>\r\n      <Grid container spacing={4} justify=\"center\">\r\n        <Grid item xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\r\n          <ColorCard\r\n            title={\"RGB\"}\r\n            text={\"Mock\"}\r\n            sliders={[\r\n              new SliderModel(0, 255, \"Red\", colorContext.rgbColor[0]),\r\n              new SliderModel(0, 255, \"Green\", colorContext.rgbColor[1]),\r\n              new SliderModel(0, 255, \"Blue\", colorContext.rgbColor[2]),\r\n            ]}\r\n            type={ColorEncoding.Rgb}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\r\n          <ColorCard\r\n            title={\"HSL\"}\r\n            text={\"Mock\"}\r\n            sliders={[\r\n              new SliderModel(0, 360, \"Hue\", colorContext.hslColor[0]),\r\n              new SliderModel(0, 100, \"Saturation\", colorContext.hslColor[1]),\r\n              new SliderModel(0, 100, \"Lightness\", colorContext.hslColor[2]),\r\n            ]}\r\n            type={ColorEncoding.Hsl}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\r\n          <ColorCard\r\n            title={\"CMYK\"}\r\n            text={\"Mock\"}\r\n            sliders={[\r\n              new SliderModel(0, 100, \"Cyan\", colorContext.cmykColor[0]),\r\n              new SliderModel(0, 100, \"Magenta\", colorContext.cmykColor[1]),\r\n              new SliderModel(0, 100, \"Yellow\", colorContext.cmykColor[2]),\r\n              new SliderModel(0, 100, \"Key\", colorContext.cmykColor[3]),\r\n            ]}\r\n            type={ColorEncoding.Cmyk}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\r\n          <ColorCard\r\n            title={\"HSV\"}\r\n            text={\"Mock\"}\r\n            sliders={[\r\n              new SliderModel(0, 360, \"Hue\", colorContext.hsvColor[0]),\r\n              new SliderModel(0, 100, \"Saturation\", colorContext.hsvColor[1]),\r\n              new SliderModel(0, 100, \"Value\", colorContext.hsvColor[2]),\r\n            ]}\r\n            type={ColorEncoding.Hsv}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Box, Container } from \"@material-ui/core\";\r\nimport ColorConverterTitle from \"./components/title/color-converter-title\";\r\nimport HexInput from \"./components/hex-input/hex-input\";\r\nimport CardsContainer from \"./components/cards-container/cards-container\";\r\n\r\nfunction ColorConverter() {\r\n  return (\r\n    <Container>\r\n      <ColorConverterTitle />\r\n      <HexInput />\r\n      <CardsContainer />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ColorConverter;\r\n","enum Unit{\r\n    Px = \"px\",\r\n    Em = \"em\",\r\n    Rem = \"rem\",\r\n    Cm = \"cm\",\r\n    Pt = \"pt\",\r\n    In = \"in\"\r\n}\r\n\r\nexport default Unit;","import Unit from \"./units.enum\";\r\n\r\nclass UnitTransformation{\r\n\r\n    public createData(unit:Unit, value:number, fontSize:number){\r\n        switch(unit){\r\n            case Unit.Px:\r\n                return {name: Unit.Px, px:value, rem:value/fontSize, em:value/fontSize, pt:value*0.74999943307122}\r\n            case Unit.Rem:\r\n                return {name: Unit.Rem, px:value*fontSize, rem:value, em:value, pt:value*11.99999092914}\r\n            case Unit.Em:\r\n                return {name: Unit.Em, px:value*fontSize, rem:value, em:value, pt:value*11.99999092914}\r\n            case Unit.Pt:\r\n                return {name: Unit.Pt, px:1.33333*value, rem:0.083333396325467*value, em:0.083333396325467*value, pt:value}\r\n        }\r\n    }\r\n   \r\n   \r\n}\r\n\r\nexport default UnitTransformation;","import  { useState } from 'react';\r\nimport UnitTransformation from '../model/transformation.model';\r\nimport Unit from '../model/units.enum';\r\n\r\nfunction useRows() {\r\n    const [value, setValue] = useState(1);\r\n    const [fontBaseSize, setFontBaseSize] = useState(16);\r\n  \r\n    const unitTransf = new UnitTransformation();\r\n  \r\n    const rows=[\r\n      unitTransf.createData(Unit.Px, value, fontBaseSize),\r\n      unitTransf.createData(Unit.Rem, value, fontBaseSize),\r\n      unitTransf.createData(Unit.Em, value, fontBaseSize),\r\n      unitTransf.createData(Unit.Pt, value, fontBaseSize)\r\n    ]\r\n\r\n    return {\r\n        value, setValue, fontBaseSize, setFontBaseSize, rows\r\n    }\r\n}\r\n\r\nexport default useRows;","import {\r\n  Container,\r\n  Grid,\r\n  TextField,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport useRows from \"../../service/useRows\";\r\n\r\nexport default function UnitConverter() {\r\n  const { value, setValue, fontBaseSize, setFontBaseSize, rows } = useRows();\r\n\r\n  return (\r\n    <div className=\"entireContainer\">\r\n      <Container maxWidth=\"md\" className={\"unitContainer\"}>\r\n        <Grid container spacing={3}>\r\n          <Grid container item xs={12} sm={4}></Grid>\r\n          <Grid container item xs={12} sm={4} justify=\"center\">\r\n            <h1 className={\"title\"}>\r\n              {/* <FormattedMessage id=\"App.title\" /> */}\r\n              Unit Converter\r\n            </h1>\r\n          </Grid>\r\n          <Grid container item xs={12} sm={4}></Grid>\r\n        </Grid>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={6} container justify=\"center\">\r\n            <TextField\r\n              InputProps={{\r\n                inputProps: {\r\n                  min: 1,\r\n                },\r\n              }}\r\n              id=\"filled-basic\"\r\n              type=\"number\"\r\n              variant=\"filled\"\r\n              fullWidth\r\n              label=\"Value\"\r\n              margin=\"dense\"\r\n              value={value}\r\n              onChange={(e) => {\r\n                setValue(parseFloat(e.target.value));\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} container justify=\"center\">\r\n            <TextField\r\n              InputProps={{\r\n                inputProps: {\r\n                  min: 1,\r\n                },\r\n              }}\r\n              fullWidth\r\n              label=\"Default font size\"\r\n              id=\"filled-basic\"\r\n              margin=\"dense\"\r\n              variant=\"filled\"\r\n              type=\"number\"\r\n              value={fontBaseSize}\r\n              onChange={(e) => {\r\n                setFontBaseSize(parseInt(e.target.value));\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <TableContainer\r\n          style={{ marginTop: \"1%\", borderRadius: \"10px\" }}\r\n          className=\"tableContainer\"\r\n        >\r\n          <Table aria-label=\"simple table\" className=\"table\">\r\n            <TableHead className=\"tableHeader\">\r\n              <TableRow className=\"tableRow\">\r\n                <TableCell\r\n                  style={{ backgroundColor: \"#81c784\" }}\r\n                  className=\"tableCellHeader\"\r\n                >{`Value: ${value}`}</TableCell>\r\n                <TableCell className=\"tableCellHeader\" align=\"center\">\r\n                  px\r\n                </TableCell>\r\n                <TableCell className=\"tableCellHeader\" align=\"center\">\r\n                  rem\r\n                </TableCell>\r\n                <TableCell className=\"tableCellHeader\" align=\"center\">\r\n                  em\r\n                </TableCell>\r\n                <TableCell className=\"tableCellHeader\" align=\"center\">\r\n                  pt\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row, index) => {\r\n                let cssClass =\r\n                  index % 2 === 0 ? \"tableCellEven\" : \"tableCellOdd\";\r\n                return (\r\n                  <TableRow key={row!.name}>\r\n                    <TableCell\r\n                      component=\"th\"\r\n                      scope=\"row\"\r\n                      className={\"tableCellHeader\"}\r\n                    >\r\n                      {row!.name}\r\n                    </TableCell>\r\n                    <TableCell align=\"center\" className={cssClass}>\r\n                      {row?.px}\r\n                    </TableCell>\r\n                    <TableCell align=\"center\" className={cssClass}>\r\n                      {row?.rem}\r\n                    </TableCell>\r\n                    <TableCell align=\"center\" className={cssClass}>\r\n                      {row?.em}\r\n                    </TableCell>\r\n                    <TableCell align=\"center\" className={cssClass}>\r\n                      {row?.pt}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","enum Components {\r\n  UnitConverter,\r\n  ColorConverter,\r\n}\r\n\r\nexport default Components;\r\n","import React, { useContext, useState } from \"react\";\r\nimport Components from \"../model/components.enum\";\r\n\r\ninterface NavigationContextModel {\r\n  activeComponent: Components;\r\n  setActiveComponent: CallableFunction;\r\n}\r\n\r\nconst NavigationContext = React.createContext({} as NavigationContextModel);\r\n\r\nexport const NavigationProvider = (props: any) => {\r\n  const [activeComponent, setActiveComponent] = useState(\r\n    Components.ColorConverter\r\n  );\r\n  return (\r\n    <NavigationContext.Provider value={{ activeComponent, setActiveComponent }}>\r\n      {props.children}\r\n    </NavigationContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useNavigationContext() {\r\n  return useContext(NavigationContext);\r\n}\r\n","import React from \"react\";\r\nimport { FaMoon } from \"react-icons/fa\";\r\nimport { FiSun } from \"react-icons/fi\";\r\nimport { useThemeContext } from \"../../context/theme-context\";\r\nimport Theme from \"../../Theme/themes.enum\";\r\n\r\nexport default function ThemeIcon() {\r\n  const { theme, setTheme } = useThemeContext();\r\n  return (\r\n    <span style={{ display: \"flex\", marginLeft: \"auto\" }}>\r\n      {theme === Theme.Dark ? (\r\n        <FiSun\r\n          className=\"settingsIcon\"\r\n          onClick={() => {\r\n            setTheme(Theme.Light);\r\n          }}\r\n        />\r\n      ) : (\r\n        <FaMoon\r\n          className=\"settingsIcon\"\r\n          onClick={() => {\r\n            setTheme(Theme.Dark);\r\n          }}\r\n        />\r\n      )}\r\n    </span>\r\n  );\r\n}\r\n","import { AppBar, Toolbar, IconButton, Button } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { useNavigationContext } from \"../../context/navigation-context\";\r\nimport ThemeIcon from \"../theme-icon/theme-icon\";\r\nimport Components from \"../../model/components.enum\";\r\n\r\nexport default function NavigationBar() {\r\n  const navigationContext = useNavigationContext();\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Button\r\n            color=\"inherit\"\r\n            onClick={() => {\r\n              navigationContext.setActiveComponent(Components.UnitConverter);\r\n            }}\r\n          >\r\n            Unit Converter\r\n          </Button>\r\n          <Button\r\n            color=\"inherit\"\r\n            onClick={() => {\r\n              navigationContext.setActiveComponent(Components.ColorConverter);\r\n            }}\r\n          >\r\n            Color Converter\r\n          </Button>\r\n          <ThemeIcon />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { injectIntl } from \"react-intl\";\nimport ColorConverter from \"./components/color-converter/color-converter\";\nimport UnitConverter from \"./components/css-unit-converter/css-unit-converter\";\nimport NavigationBar from \"./components/navigation-bar/navigation-bar\";\nimport { ColorContextProvider } from \"./context/color-context\";\nimport { useNavigationContext } from \"./context/navigation-context\";\nimport Components from \"./model/components.enum\";\n\nfunction renderSelectedComponent(activeComponent: Components) {\n  switch (activeComponent) {\n    case Components.UnitConverter:\n      return <UnitConverter />;\n    case Components.ColorConverter:\n      return (\n        <ColorContextProvider>\n          <ColorConverter />;\n        </ColorContextProvider>\n      );\n    default:\n      return <UnitConverter />;\n  }\n}\n\nfunction App() {\n  const navigationContext = useNavigationContext();\n  return (\n    <>\n      <NavigationBar />\n      {renderSelectedComponent(navigationContext.activeComponent)}\n    </>\n  );\n}\n\nexport default injectIntl(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport \"./Theme/dark.scss\";\nimport \"./Theme/light.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider } from \"./context/theme-context\";\nimport { IntlProvider } from \"react-intl\";\nimport { SnackbarProvider } from \"notistack\";\n\nimport messages_de from \"./translations/de.json\";\nimport messages_en from \"./translations/en.json\";\nimport { NavigationProvider } from \"./context/navigation-context\";\n\nconst messages = {\n  de: messages_de,\n  en: messages_en,\n};\n// const language = navigator.language.split(/[-_]/)[0];\n\nReactDOM.render(\n  <React.StrictMode>\n    <IntlProvider locale=\"de\" messages={messages[\"de\"]}>\n      <ThemeProvider>\n        <SnackbarProvider\n          maxSnack={3}\n          anchorOrigin={{\n            vertical: \"top\",\n            horizontal: \"center\",\n          }}\n        >\n          <NavigationProvider>\n            <App />\n          </NavigationProvider>\n        </SnackbarProvider>\n      </ThemeProvider>\n    </IntlProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}